!----------------------PROJECT FLOW--------------------------!
1. Create the github repo and clone it into local system.(Add the experiment folder in it )
2. Add the src folder along with its all components[(rum them individually),(components like data ingestion data preprtocessing feature engineering,model evaluation)].
3> Add data, models, reports directories to .gitignore file
4> Now git add, commit, push


Setting up dcv pipeline (without params)
5> Create dvc.yaml file and add stages to it.
6> dvc init then do "dvc repro" to test the pipeline automation. (check dvc dag)
7> Now git add, commit, push

Setting up dcv pipeline (with params)
8> add params.yaml file
9> Add the params setup (mentioned below)
10> Do "dvc repro" again to test the pipeline along with the params
11> Now git add, commit, push




----------------------------PARAMS SETUPS CODE -----------------------------
#LOAD THE PARAMS 
def load_params(params_path:str)->None:
    """Loading the parameters from the params section"""
    try:
        with open(params_path,'rb') as file:
            params=yaml.safe_load(file)
        logger.debug('Params file load successfully %s ')
        return params
    except FileNotFoundError as e:
        logger.debug('File not found %s',e)
        raise
    except yaml.YAMLError as e:
        logger.debug('YAML Error %s',e)
        raise
    except Exception as e:
        logger.debug('unexpected error %s',e)



---------------------------END-----------------------

Expermients with DVC:
12> pip install dvclive
13> Add the dvclive code block (mentioned below)
14> Do "dvc exp run", it will create a new dvc.yaml(if already not there) and dvclive directory (each run will be considered as an experiment by DVC)
15> Do "dvc exp show" on terminal to see the experiments or use extension on VSCode (install dvc extension)
16> Do "dvc exp remove {exp-name}" to remove exp (optional) | "dvc exp apply {exp-name}" to reproduce prev exp
17> Change params, re-run code (produce new experiments)
18> Now git add, commit, push
